buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {

        //corda_gradle_plugins_version = '4.0.45'

        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group = constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        //springboot
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"

    }
}

allprojects {
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

cordapp {
    info {
        name "AgriLedger CorDapp"
        vendor "AgriLedger"
        targetPlatformVersion corda_platform_version
        minimumPlatformVersion corda_platform_version
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contracts')
        cordapp project(':workflows')
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        cordapp(project(':workflows')) {
            config "notary=\"O=Notary,L=London,C=GB\""
        }
    }
    node {
        name "O=SAE,L=Port-au-Prince,C=HT"
        p2pPort 10008
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10049")
        }
        cordapp(project(':workflows')) {
            config "notary=\"O=Notary,L=London,C=GB\""
        }
        rpcUsers = [
                [
                        user         : "test_rpc_user",
                        "password"   : "test",
                        "permissions": [
                                "InvokeRpc.nodeInfo",
                                "InvokeRpc.registeredFlows",
                                "InvokeRpc.partiesFromName",
                                "InvokeRpc.wellKnownPartyFromX500Name",
                                "InvokeRpc.vaultQueryByCriteria",
                                "InvokeRpc.vaultQueryByWithPagingSpec",
                                "InvokeRpc.vaultQueryBy",
                                "StartFlow.io.agriledger.flows.CreateServiceRequestFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.UpdateIdentificationNoFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.EditServiceRequestDetailsFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.DeleteServiceRequestFlow\$Initiator"
                        ]
                ]
        ]
    }
    node {
        name "O=LSP,L=Port-au-Prince,C=HT"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        cordapp(project(':workflows')) {
            config "notary=\"O=Notary,L=London,C=GB\""
        }
        rpcUsers = [
                [
                        user         : "test_rpc_user",
                        "password"   : "test",
                        "permissions": [
                                "InvokeRpc.nodeInfo",
                                "InvokeRpc.registeredFlows",
                                "InvokeRpc.partiesFromName",
                                "InvokeRpc.wellKnownPartyFromX500Name",
                                "InvokeRpc.vaultQueryByCriteria",
                                "InvokeRpc.vaultQueryByWithPagingSpec",
                                "InvokeRpc.vaultQueryBy",
                                "StartFlow.io.agriledger.flows.AcceptServiceRequestFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.FruitFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.CreateBatchFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.ProformaInvoiceCreationFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.DeleteDuplicateBatchFlow\$Initiator"
                        ]
                ]
        ]
    }
    node {
        name "O=Collector,L=Port-au-Prince,C=HT"
        p2pPort 10009
        rpcSettings {
            address("localhost:10011")
            adminAddress("localhost:10048")
        }
        cordapp(project(':workflows')) {
            config "notary=\"O=Notary,L=London,C=GB\""
        }
        rpcUsers = [
                [
                        user         : "test_rpc_user",
                        "password"   : "test",
                        "permissions": [
                                "InvokeRpc.nodeInfo",
                                "InvokeRpc.registeredFlows",
                                "InvokeRpc.partiesFromName",
                                "InvokeRpc.wellKnownPartyFromX500Name",
                                "InvokeRpc.vaultQueryByCriteria",
                                "InvokeRpc.vaultQueryByWithPagingSpec",
                                "InvokeRpc.vaultQueryBy",
                                "StartFlow.io.agriledger.flows.CollectorEnRouteToProducerFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.WithProducerFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.CollectorEnrouteToPackhouseFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.CollectorArrivedAtPackHouseFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.RejectLotFlow\$Initiator"
                        ]
                ]
        ]
    }
    node {
        name "O=Broker,L=New York,C=US"
        p2pPort 10010
        rpcSettings {
            address("localhost:10007")
            adminAddress("localhost:10047")
        }
        cordapp(project(':workflows')) {
            config "notary=\"O=Notary,L=London,C=GB\""
        }
        rpcUsers = [
                [
                        user         : "test_rpc_user",
                        "password"   : "test",
                        "permissions": [
                                "InvokeRpc.nodeInfo",
                                "InvokeRpc.registeredFlows",
                                "InvokeRpc.partiesFromName",
                                "InvokeRpc.wellKnownPartyFromX500Name",
                                "InvokeRpc.vaultQueryByCriteria",
                                "InvokeRpc.vaultQueryByWithPagingSpec",
                                "InvokeRpc.vaultQueryBy",
                                "StartFlow.io.agriledger.flows.UpdateBatch\$Initiator",
                                "StartFlow.io.agriledger.flows.NewSaleFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.UpdateSalesFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.NoSaleFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.PaymentDistributionFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.PenaltiesCalculationFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.UndoSaleFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.EditServiceRequestDetailsFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.EditSalesDetailsFlow\$Initiator",
                                "StartFlow.io.agriledger.flows.DeletePenaltiesFlow\$Initiator",
                        ]
                ]
        ]
    }

}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

